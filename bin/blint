#!/usr/bin/env node

var blint = require("../blint"), fs = require("fs"), path = require("path");

var program = require("commander").program

program
    .option("--ecmaVersion <version>", "ECMAScript version to parse")
    .option("--browser", "Allow browser globals")
    .option("--tabs", "Allow tabs")
    .option("--trailing", "Allow trailing whitespace")
    .option("--requireSemicolons", "Disallow semicolon insertion")
    .option("--forbidSemicolons", "Disallow unneccesary semicolons")
    .option("--trailingCommas", "Allow trailing commas")
    .option("--noReservedProps", "Disallow reserved words as property names")
    .option("--namedFunctions", "Allow named function expressions")
    .option("--noDeclareGlobals", "Disallow code to declare globals")
    .option("--package", "Get options from package.json")

program.parse(process.argv)

var args = program.opts()

function findPackage(dir) {
  for (;;) {
    try {
      var package = path.resolve(dir, "package.json");
      if (fs.statSync(package).isFile())
        return JSON.parse(fs.readFileSync(package, "utf8"));
    } catch(e) {}
    var shorter = path.dirname(dir);
    if (shorter == dir) return null;
    dir = shorter;
  }
}

var options;
if (args.package && program.args[0]) {
  var conf = findPackage(program.args[0]);
  options = conf && conf.blint;
} else {
  options = {ecmaVersion: args.ecmaVersion || 5,
             browser: args.browser,
             tabs: args.tabs,
             trailing: args.trailing,
             semicolons: args.requireSemicolons ? true : args.forbidSemicolons ? false : null,
             trailingCommas: args.trailingCommas,
             reservedProps: !args.noReservedProps,
             namedFunctions: args.namedFunctions,
             declareGlobals: !args.noDeclareGlobals};
}

for (var i = 0; i < program.args.length; i++) {
  var stat = fs.statSync(program.args[i]);
  if (stat.isDirectory()) blint.checkDir(program.args[i], options);
  else blint.checkFile(program.args[i], options);
}

process.exit(blint.success() ? 0 : 1);
